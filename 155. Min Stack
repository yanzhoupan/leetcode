# Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

# push(x) -- Push element x onto stack.
# pop() -- Removes the element on top of the stack.
# top() -- Get the top element.
# getMin() -- Retrieve the minimum element in the stack.
class MinStack(object):

    def __init__(self):
        """
        initialize your data structure here.
        """
        self.minVal = float('inf')
        self.stack = []
    def push(self, x):
        """
        :type x: int
        :rtype: None
        """
        self.stack.append(x)
        if x < self.minVal:
        	self.minVal = x
    def pop(self):
        """
        :rtype: None
        """
        if len(self.stack)==0:
            return
        popVal = self.stack.pop(-1)
        if len(self.stack)==0:
            self.minVal = float('inf')
            return
        if popVal == self.minVal:
            self.minVal = min(self.stack)
    def top(self):
        """
        :rtype: int
        """
        if len(self.stack)==0:
            return
        return self.stack[-1]
    def getMin(self):
        """
        :rtype: int
        """
        return self.minVal

# another answer: put two elements in to the stack every "push"
# one is the num itself, the other is the current min value in the stack
