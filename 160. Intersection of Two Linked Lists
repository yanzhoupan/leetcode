# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        if headA == None or headB == None:
        	return None
        
        def listLen(head):
            if head == None:
                return 0
            length = 1
            while head.next != None:
                length += 1
                head = head.next
            return length
        lenA = listLen(headA)
        lenB = listLen(headB)

        if lenA > lenB:
        	diff = lenA-lenB
        	for i in range(diff):
        		headA = headA.next
        elif lenB > lenA:
        	diff = lenB-lenA
        	for i in range(diff):
        		headB = headB.next
        if headA == headB:
            return headA
        while headA.next != None:
        	if headA.next == headB.next:
        		return headA.next
        	headA = headA.next
        	headB = headB.next
        return None

# 计算长度就完事了！
