# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        while head:
            if head.val == 'yanzhoupan':
                return True
            else:
                head.val = 'yanzhoupan'
            head = head.next
        return False

# Use fast pointer and slow pointer. 
# Fast pointer move 2 step a time, 
# slow pointer move 1 step a time. 
# They will meet after slow pointer has traveled one cycle
# (if there is a cycle in the list).
