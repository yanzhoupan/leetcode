# 判断一个自然数是否是质数，只用看从2到根号N是否能整除N  
# 一个合数的最小正因子必小于根号N。
# 
# 我的方法超出了时间限制：
# class Solution(object):
#     def countPrimes(self, n):
#         """
#         :type n: int
#         :rtype: int
#         """
#         if n<3:
#         	return 0
#         if n==3:
#             return 1
#         count = 0
#         for i in range(2,n):
#         	if self.isPrime(i):
#         		count += 1
#         return count

#     def isPrime(self, num):
#     	import math
#         num_sqrt = int(math.sqrt(num))
#     	for i in range(2,num_sqrt+1):
#     		if num % i == 0:
#     			return False
#     	return True

# 应该使用厄拉多塞筛法：
# 首先0,1不是质数.2是第一个质数，然后把n以内所有2的倍数划去.
# 2后面紧跟的数即为下一个质数3,然后把3所有的倍数划去.
# 3后面紧跟的数即为下一个质数5,再把5所有的倍数划去.以此类推.
class Solution(object):
    def countPrimes(self, n):
        # 厄拉多塞筛法
        if n<3:
            return 0
        # 首先生成一个全部为1的列表
        output = [1] * n
        output[0],output[1] = 0,0
        
        for i in range(2,int(n**0.5)+1):# 从2开始，按照倍数筛
            if output[i] == 1:# 如果i为质数
                output[i*i:n:i] = [0] * len(output[i*i:n:i])# 将i的倍数置为0
        return sum(output)
