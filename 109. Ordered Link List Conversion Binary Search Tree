# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
        def numListToBST(nums):
            if len(nums) == 0:
                return None
            if len(nums) == 1:
                return TreeNode(nums[0])
            rootIndex = len(nums)/2
            root = TreeNode(nums[rootIndex])
            root.left = numListToBST(nums[0 : rootIndex])
            root.right = numListToBST(nums[rootIndex+1 : ])
            return root
        nums = []
        while head != None:
            nums.append(head.val)
            head = head.next
        return numListToBST(nums)

# 有序链表转二叉搜索树，也使用了递归。
